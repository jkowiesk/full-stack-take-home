// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url       = env("DATABASE_URL")
    directUrl = env("DIRECT_URL")

}

// User Portal Account (not to be confused with NextAuth Account)
model UserAccount {
    id          String   @id @default(cuid())
    name        String
    location    String
    email       String?
    phone       String?
    address     String?
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt

    // Relations
    documents   Document[]

    // User who created this account
    createdBy   User   @relation(fields: [createdById], references: [id])
    createdById String

    @@index([name])
    @@index([createdById])
}

// Document management
model Document {
    id          String   @id @default(cuid())
    filename    String
    originalName String
    fileSize    Int
    mimeType    String
    filePath    String   // Path where file is stored
    uploadedAt  DateTime @default(now())

    // Relations
    account     UserAccount @relation(fields: [accountId], references: [id], onDelete: Cascade)
    accountId   String

    uploadedBy  User     @relation(fields: [uploadedById], references: [id])
    uploadedById String

    @@index([accountId])
    @@index([uploadedById])
    @@index([filename])
}

// Necessary for Next auth
model Account {
    id                       String  @id @default(cuid())
    userId                   String
    type                     String
    provider                 String
    providerAccountId        String
    refresh_token            String? @db.Text
    access_token             String? @db.Text
    expires_at               Int?
    token_type               String?
    scope                    String?
    id_token                 String? @db.Text
    session_state            String?
    user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
    refresh_token_expires_in Int?

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    password      String?   @db.Text
    emailVerified  DateTime?
    image         String?

    // NextAuth relations
    accounts      Account[]
    sessions      Session[]

    // App-specific relations
    userAccounts  UserAccount[]
    documents     Document[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}